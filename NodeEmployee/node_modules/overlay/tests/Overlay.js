// Generated by CoffeeScript 1.6.3
(function() {
  var Q, overlay;

  overlay = require('Overlay');

  Q = require('q');

  Q.stopUnhandledRejectionTracking();

  describe('Overlay', function() {
    afterEach(function() {
      if (overlay.visible === true) {
        overlay.hide();
        overlay.visible = false;
      }
      overlay.el = null;
      return $('#__dk-overlay').remove();
    });
    describe('#show()', function() {
      it('should create new element in page', function(done) {
        return overlay.show().then(function() {
          var el;
          el = $('#__dk-overlay');
          expect(overlay.visible).to.be["true"];
          expect(el.length).equal(1);
          expect(el.is(':visible')).to.be["true"];
          return done();
        }).done();
      });
      it('should return an error if there is element with same id', function(done) {
        $('<div id="__dk-overlay">test</div>').appendTo('body');
        return overlay.show().fail(function(err) {
          expect(err).to.be["instanceof"](Error);
          return done();
        }).done();
      });
      return it('should return an error if overlay is already opened', function(done) {
        return overlay.show().then(function() {
          return overlay.show().fail(function(err) {
            expect(err).to.be["instanceof"](Error);
            return done();
          }).done();
        }).done();
      });
    });
    return describe('#hide()', function() {
      it('should hide overlay', function(done) {
        return overlay.show().then(function() {
          return overlay.hide().then(function() {
            var el;
            el = $('#__dk-overlay');
            expect(overlay.visible).to.be["false"];
            expect(el.length).equal(1);
            expect(el.is(':visible')).to.be["false"];
            return done();
          }).done();
        }).done();
      });
      return it('should return an error if overlay is not visible', function(done) {
        return overlay.hide().fail(function(err) {
          expect(err).to.be["instanceof"](Error);
          return done();
        }).done();
      });
    });
  });

}).call(this);
